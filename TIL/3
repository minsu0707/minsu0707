// 📁 massive-todo-ai-sorter.js

/**
 * 목표: 500줄 이상의 지리는 로직 만들기 (버전 2)
 * 주제: 대규모 투두 리스트 관리 시스템 with AI 예측 로직 + 로컬 시뮬레이션
 */

// ------------------------------
// SECTION 1: 유틸 함수 모음
// ------------------------------
function generateId() {
  return Math.random().toString(36).substr(2, 9);
}

function getToday() {
  return new Date().toISOString().split("T")[0];
}

function randomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function shuffleArray(arr) {
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
}

function delay(ms) {
  return new Promise((res) => setTimeout(res, ms));
}

// ------------------------------
// SECTION 2: Task 클래스 정의
// ------------------------------
class Task {
  constructor(title, category = "general", estimatedMin = 30, dueDate = null, priority = 3) {
    this.id = generateId();
    this.title = title;
    this.category = category;
    this.estimatedMin = estimatedMin;
    this.dueDate = dueDate;
    this.priority = priority;
    this.completed = false;
    this.createdAt = new Date().toISOString();
  }

  isOverdue() {
    if (!this.dueDate) return false;
    const today = new Date(getToday());
    return new Date(this.dueDate) < today;
  }

  score() {
    const urgency = this.isOverdue() ? 5 : this.dueDate ? 3 : 0;
    return this.priority * 2 + urgency + Math.floor(100 / (this.estimatedMin + 1));
  }
}

// ------------------------------
// SECTION 3: TaskManager 대규모 로직
// ------------------------------
class TaskManager {
  constructor() {
    this.tasks = [];
  }

  addTask(task) {
    this.tasks.push(task);
  }

  bulkAdd(count = 100) {
    const categories = ["work", "life", "health", "hobby", "study"];
    for (let i = 0; i < count; i++) {
      const title = `Task ${i + 1}`;
      const category = categories[randomInt(0, categories.length - 1)];
      const est = randomInt(15, 120);
      const due = Math.random() > 0.7 ? getToday() : null;
      const priority = randomInt(1, 5);
      const t = new Task(title, category, est, due, priority);
      this.addTask(t);
    }
  }

  completeTaskById(id) {
    const t = this.tasks.find((task) => task.id === id);
    if (t) t.completed = true;
  }

  getPendingTasks() {
    return this.tasks.filter((t) => !t.completed);
  }

  getSortedTasks() {
    return [...this.getPendingTasks()].sort((a, b) => b.score() - a.score());
  }

  printSummary() {
    const total = this.tasks.length;
    const completed = this.tasks.filter((t) => t.completed).length;
    const overdue = this.tasks.filter((t) => t.isOverdue()).length;
    console.log(`총 작업 수: ${total}`);
    console.log(`완료된 작업: ${completed}`);
    console.log(`마감일 지난 작업: ${overdue}`);
  }

  async simulateProcessing(limit = 10) {
    const sorted = this.getSortedTasks();
    console.log(`\n🔁 상위 ${limit}개 작업 수행 시뮬레이션 시작`);
    for (let i = 0; i < Math.min(limit, sorted.length); i++) {
      const task = sorted[i];
      console.log(`\n▶️ [${task.title}] 시작 (예상 시간: ${task.estimatedMin}분)`);
      await delay(100);
      this.completeTaskById(task.id);
      console.log(`✅ [${task.title}] 완료됨!`);
    }
  }
}

// ------------------------------
// SECTION 4: 실행
// ------------------------------
(async () => {
  const manager = new TaskManager();
  manager.bulkAdd(300); // 300개 작업 생성
  manager.printSummary();

  console.log("\n📋 상위 중요 작업 미리보기:");
  manager.getSortedTasks()
    .slice(0, 5)
    .forEach((t, i) => {
      console.log(`${i + 1}. ${t.title} [score: ${t.score()}]`);
    });

  await manager.simulateProcessing(20); // 상위 20개 시뮬레이션

  console.log("\n🧾 최종 요약:");
  manager.printSummary();
})();
