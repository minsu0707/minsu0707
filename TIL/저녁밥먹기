// authServer.js
const express = require("express");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const dotenv = require("dotenv");
const cors = require("cors");

dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

const PORT = 4000;
const JWT_SECRET = process.env.JWT_SECRET || "mySuperSecretKey";
const JWT_EXPIRES_IN = "1h";

// 🧑‍💻 [Mock DB] 실제론 DB 연결해야 함
let users = [
  {
    id: 1,
    email: "test@example.com",
    password: bcrypt.hashSync("123456", 8), // 비밀번호는 해시된 상태
    name: "Test User",
  },
];

// ✅ 토큰 생성 함수
const generateToken = (user) => {
  return jwt.sign(
    { id: user.id, email: user.email, name: user.name },
    JWT_SECRET,
    { expiresIn: JWT_EXPIRES_IN }
  );
};

// ✅ 인증 미들웨어
const authenticate = (req, res, next) => {
  const authHeader = req.headers["authorization"];
  if (!authHeader) return res.status(401).json({ message: "토큰 없음" });

  const token = authHeader.split(" ")[1];
  if (!token) return res.status(401).json({ message: "토큰 형식 오류" });

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.user = decoded;
    next();
  } catch (err) {
    return res.status(401).json({ message: "유효하지 않은 토큰" });
  }
};

// 🔐 로그인 API
app.post("/api/login", (req, res) => {
  const { email, password } = req.body;
  const user = users.find((u) => u.email === email);

  if (!user) {
    return res.status(400).json({ message: "사용자가 존재하지 않습니다." });
  }

  const isMatch = bcrypt.compareSync(password, user.password);
  if (!isMatch) {
    return res.status(401).json({ message: "비밀번호가 틀렸습니다." });
  }

  const token = generateToken(user);
  res.status(200).json({ token, user: { id: user.id, name: user.name, email: user.email } });
});

// 🔓 회원가입 (간단한 예제용)
app.post("/api/register", (req, res) => {
  const { email, password, name } = req.body;

  if (users.find((u) => u.email === email)) {
    return res.status(400).json({ message: "이미 존재하는 이메일입니다." });
  }

  const newUser = {
    id: users.length + 1,
    email,
    name,
    password: bcrypt.hashSync(password, 8),
  };

  users.push(newUser);
  const token = generateToken(newUser);
  res.status(201).json({ token, user: { id: newUser.id, email, name } });
});

// 🙋‍♂️ 로그인된 유저 정보 확인
app.get("/api/me", authenticate, (req, res) => {
  res.status(200).json({ user: req.user });
});

// ✅ 로그아웃은 프론트에서 토큰을 삭제하면 끝
// 서버에서는 특별한 작업을 하지 않음 (JWT는 상태가 없음)

// 서버 시작
app.listen(PORT, () => {
  console.log(`✅ 서버가 http://localhost:${PORT} 에서 실행 중`);
});
