const userBudget = {
  food: 200000,
  transport: 100000,
  hobby: 150000,
  shopping: 100000,
  etc: 50000,
};

const userSpending = [
  { category: 'food', amount: 12000, date: '2025-06-01' },
  { category: 'food', amount: 50000, date: '2025-06-10' },
  { category: 'transport', amount: 40000, date: '2025-06-05' },
  { category: 'hobby', amount: 80000, date: '2025-06-07' },
  { category: 'hobby', amount: 100000, date: '2025-06-12' },
  { category: 'shopping', amount: 60000, date: '2025-06-15' },
  { category: 'etc', amount: 55000, date: '2025-06-17' },
  { category: 'food', amount: 90000, date: '2025-06-28' },
];

// 현재 달
const currentMonth = new Date().getMonth(); // 0~11

// 카테고리별 합산
const monthlySpending = userSpending.reduce((acc, { category, amount, date }) => {
  const d = new Date(date);
  if (d.getMonth() !== currentMonth) return acc; // 이번 달 아니면 무시

  if (!acc[category]) acc[category] = 0;
  acc[category] += amount;
  return acc;
}, {});

// 절약 메시지
const savingTips = {
  food: '식비는 배달보단 직접 요리하거나 도시락을 추천합니다!',
  transport: '대중교통 정기권을 활용해보세요!',
  hobby: '취미 소비는 무료 체험부터 시작해보는 건 어때요?',
  shopping: '불필요한 소비는 장바구니에 담고 하루 뒤에 결제하세요!',
  etc: '기타 지출은 정리되지 않으면 누수가 커집니다. 한 번 더 점검해보세요.',
};

// 결과 분석
const analyzeSpending = (spending, budget) => {
  console.log(`📊 [이번 달 소비 분석 결과]\n`);

  Object.keys(budget).forEach((category) => {
    const spent = spending[category] || 0;
    const limit = budget[category];
    const percent = Math.round((spent / limit) * 100);

    let message = `- ${category.toUpperCase()}: ${spent.toLocaleString()}원 / ${limit.toLocaleString()}원 (${percent}%)`;

    if (spent > limit) {
      message += ` ⚠️ 예산 초과! → ${savingTips[category]}`;
    } else if (percent >= 80) {
      message += ` 🟡 예산 근접. 관리가 필요해요.`;
    } else {
      message += ` ✅ 안정적인 지출입니다.`;
    }

    console.log(message);
  });
};

// 실행
analyzeSpending(monthlySpending, userBudget);
