import { DateTime } from 'luxon';

// Mock 도시 목록
const cities = [
  { name: 'Seoul', timezone: 'Asia/Seoul' },
  { name: 'New York', timezone: 'America/New_York' },
  { name: 'Paris', timezone: 'Europe/Paris' },
  { name: 'London', timezone: 'Europe/London' },
  { name: 'Tokyo', timezone: 'Asia/Tokyo' },
  { name: 'Sydney', timezone: 'Australia/Sydney' },
  { name: 'Dubai', timezone: 'Asia/Dubai' },
  { name: 'Cairo', timezone: 'Africa/Cairo' },
];

// 모킹된 날씨 API (7일치)
const getWeatherData = async (cityName) => {
  return new Promise((resolve) => {
    const data = Array.from({ length: 7 }).map(() => ({
      temp: Math.floor(Math.random() * 25 + 5), // 5도~30도 랜덤
    }));
    setTimeout(() => resolve(data), 100); // mock latency
  });
};

// 여행 추천 텍스트
const getTravelSuggestion = (city, tempDiff) => {
  if (tempDiff > 10) return `${city}는 날씨 변화가 극심해서 다양한 계절 옷이 필요해요. 모험가에게 추천!`;
  if (tempDiff > 5) return `${city}는 선선하면서도 간간히 더워서 산책과 관광 둘 다 즐기기 좋아요.`;
  return `${city}는 날씨가 안정적이라 휴양에 적합합니다.`;
};

// 메인 로직
const findTopTravelCities = async () => {
  try {
    const currentDate = DateTime.now();

    // 1. 밤인 도시 필터링
    const nightCities = cities.filter((city) => {
      const localTime = currentDate.setZone(city.timezone);
      const hour = localTime.hour;
      return hour >= 20 || hour <= 6;
    });

    console.log('밤인 도시:', nightCities.map((c) => c.name));

    // 2. 날씨 변화량 계산
    const weatherChanges = await Promise.all(
      nightCities.map(async (city) => {
        const weather = await getWeatherData(city.name); // 7일치 날씨
        const temps = weather.map((w) => w.temp);
        const max = Math.max(...temps);
        const min = Math.min(...temps);
        return {
          city: city.name,
          tempDiff: max - min,
        };
      })
    );

    // 3. 변화량 기준으로 정렬 및 상위 5개 추출
    const topCities = weatherChanges
      .sort((a, b) => b.tempDiff - a.tempDiff)
      .slice(0, 5);

    // 4. 결과 출력
    console.log('\n📍 추천 여행지 TOP 5');
    topCities.forEach(({ city, tempDiff }, index) => {
      const reason = getTravelSuggestion(city, tempDiff);
      console.log(`${index + 1}. ${city} - 변화량: ${tempDiff}도 🌡️ → ${reason}`);
    });

  } catch (err) {
    console.error('에러 발생:', err);
  }
};

// 실행
findTopTravelCities();
