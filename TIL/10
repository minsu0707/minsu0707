const fs = require('fs');
const path = require('path');
const readline = require('readline');

const DATA_FILE = path.join(__dirname, 'todos.json');

// ==================== Todo Model ==================== //
class Todo {
  constructor(id, title, dueDate = null, completed = false, createdAt = new Date()) {
    this.id = id;
    this.title = title;
    this.dueDate = dueDate;
    this.completed = completed;
    this.createdAt = createdAt;
    this.updatedAt = new Date();
  }
}

// ==================== Storage ==================== //
class TodoStorage {
  static load() {
    if (!fs.existsSync(DATA_FILE)) return [];
    const data = fs.readFileSync(DATA_FILE, 'utf-8');
    try {
      const parsed = JSON.parse(data);
      return parsed.map(
        t => new Todo(t.id, t.title, t.dueDate, t.completed, new Date(t.createdAt))
      );
    } catch (e) {
      console.error('⚠ 저장소 로드 중 오류:', e.message);
      return [];
    }
  }

  static save(todos) {
    fs.writeFileSync(DATA_FILE, JSON.stringify(todos, null, 2), 'utf-8');
  }
}

// ==================== Todo Manager ==================== //
class TodoManager {
  constructor() {
    this.todos = TodoStorage.load();
  }

  generateId() {
    return `${Date.now()}-${Math.floor(Math.random() * 10000)}`;
  }

  create(title, dueDate = null) {
    const id = this.generateId();
    const todo = new Todo(id, title, dueDate);
    this.todos.push(todo);
    this.persist();
    return todo;
  }

  findById(id) {
    return this.todos.find(todo => todo.id === id);
  }

  update(id, newTitle, newDueDate = null) {
    const todo = this.findById(id);
    if (todo) {
      todo.title = newTitle;
      todo.dueDate = newDueDate;
      todo.updatedAt = new Date();
      this.persist();
    }
  }

  delete(id) {
    this.todos = this.todos.filter(todo => todo.id !== id);
    this.persist();
  }

  toggle(id) {
    const todo = this.findById(id);
    if (todo) {
      todo.completed = !todo.completed;
      todo.updatedAt = new Date();
      this.persist();
    }
  }

  clearCompleted() {
    this.todos = this.todos.filter(todo => !todo.completed);
    this.persist();
  }

  sortByDate(order = 'asc') {
    return [...this.todos].sort((a, b) => {
      return order === 'asc'
        ? new Date(a.createdAt) - new Date(b.createdAt)
        : new Date(b.createdAt) - new Date(a.createdAt);
    });
  }

  filter(filterType = 'all') {
    switch (filterType) {
      case 'completed':
        return this.todos.filter(t => t.completed);
      case 'active':
        return this.todos.filter(t => !t.completed);
      default:
        return this.todos;
    }
  }

  persist() {
    TodoStorage.save(this.todos);
  }

  reset() {
    this.todos = [];
    this.persist();
  }
}

// ==================== Utility ==================== //
function formatDate(date) {
  if (!date) return '없음';
  return new Date(date).toISOString().slice(0, 10);
}

function displayTodos(todos) {
  if (!todos.length) {
    console.log('\n⚠ 할 일이 없습니다.\n');
    return;
  }
  console.log('\n📋 현재 할 일 목록');
  todos.forEach((todo, index) => {
    console.log(
      `${index + 1}. [${todo.completed ? '✔' : ' '}] ${todo.title} (마감: ${formatDate(
        todo.dueDate
      )}) [ID: ${todo.id}]`
    );
  });
  console.log('');
}

// ==================== CLI ==================== //
class TodoCLI {
  constructor() {
    this.manager = new TodoManager();
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });
  }

  start() {
    console.log('\n🧠 ToDo CLI에 오신 것을 환영합니다!\n');
    this.showHelp();
    this.rl.setPrompt('📌 명령 입력 > ');
    this.rl.prompt();
    this.rl.on('line', line => {
      const [command, ...args] = line.trim().split(' ');
      this.handleCommand(command.toLowerCase(), args);
      this.rl.prompt();
    });
  }

  handleCommand(command, args) {
    switch (command) {
      case 'add':
        this.addFlow(args);
        break;
      case 'list':
        displayTodos(this.manager.todos);
        break;
      case 'done':
        this.toggleFlow(args);
        break;
      case 'delete':
        this.deleteFlow(args);
        break;
      case 'update':
        this.updateFlow(args);
        break;
      case 'clear':
        this.manager.clearCompleted();
        console.log('✅ 완료된 항목 모두 삭제됨.');
        break;
      case 'sort':
        const order = args[0] === 'desc' ? 'desc' : 'asc';
        displayTodos(this.manager.sortByDate(order));
        break;
      case 'filter':
        displayTodos(this.manager.filter(args[0]));
        break;
      case 'reset':
        this.manager.reset();
        console.log('🗑 모든 데이터 초기화됨.');
        break;
      case 'help':
        this.showHelp();
        break;
      case 'exit':
        this.rl.close();
        break;
      default:
        console.log('⚠ 알 수 없는 명령어입니다. `help`를 입력하세요.');
    }
  }

  addFlow(args) {
    const title = args.join(' ');
    if (!title) {
      console.log('❗ 제목을 입력하세요. 예: add 공부하기');
      return;
    }
    this.manager.create(title);
    console.log(`✅ "${title}" 추가됨.`);
  }

  toggleFlow(args) {
    const id = args[0];
    if (!id) return console.log('❗ ID를 입력하세요. 예: done 123456');
    this.manager.toggle(id);
    console.log(`✅ ID ${id} 완료 상태 토글됨.`);
  }

  deleteFlow(args) {
    const id = args[0];
    if (!id) return console.log('❗ ID를 입력하세요. 예: delete 123456');
    this.manager.delete(id);
    console.log(`🗑 ID ${id} 삭제됨.`);
  }

  updateFlow(args) {
    const id = args[0];
    const newTitle = args.slice(1).join(' ');
    if (!id || !newTitle) {
      console.log('❗ 사용법: update <id> <새 제목>');
      return;
    }
    this.manager.update(id, newTitle);
    console.log(`✏ ID ${id} 내용이 수정되었습니다.`);
  }

  showHelp() {
    console.log(`
📝 사용 가능한 명령어:
 add <내용>          : 새 할 일 추가
 list                : 전체 할 일 목록 출력
 done <id>           : 할 일 완료 상태 토글
 update <id> <내용>  : 할 일 내용 수정
 delete <id>         : 할 일 삭제
 clear               : 완료된 항목 모두 삭제
 sort asc|desc       : 생성일 기준 정렬
 filter all|active|completed : 필터링
 reset               : 전체 초기화
 help                : 명령어 도움말
 exit                : 종료
`);
  }
}

// ==================== Run CLI ==================== //
if (require.main === module) {
  const cli = new TodoCLI();
  cli.start();
}
