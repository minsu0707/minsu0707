const fs = require('fs');
const path = require('path');

const DATA_FILE = path.join(__dirname, 'todo_data.json');

class TodoItem {
  constructor(id, text, completed = false, createdAt = new Date()) {
    this.id = id;
    this.text = text;
    this.completed = completed;
    this.createdAt = createdAt;
  }
}

class TodoList {
  constructor() {
    this.todos = [];
    this.load();
  }

  generateId() {
    return `${Date.now()}-${Math.floor(Math.random() * 10000)}`;
  }

  addTodo(text) {
    const id = this.generateId();
    const todo = new TodoItem(id, text);
    this.todos.push(todo);
    this.save();
    return todo;
  }

  deleteTodo(id) {
    const index = this.todos.findIndex(t => t.id === id);
    if (index !== -1) {
      const removed = this.todos.splice(index, 1);
      this.save();
      return removed[0];
    }
    return null;
  }

  toggleTodo(id) {
    const todo = this.todos.find(t => t.id === id);
    if (todo) {
      todo.completed = !todo.completed;
      this.save();
    }
  }

  updateTodo(id, newText) {
    const todo = this.todos.find(t => t.id === id);
    if (todo) {
      todo.text = newText;
      this.save();
    }
  }

  filterTodos(filter = 'all') {
    switch (filter) {
      case 'completed':
        return this.todos.filter(t => t.completed);
      case 'active':
        return this.todos.filter(t => !t.completed);
      default:
        return [...this.todos];
    }
  }

  getAllTodos() {
    return [...this.todos];
  }

  clearCompleted() {
    this.todos = this.todos.filter(t => !t.completed);
    this.save();
  }

  load() {
    if (fs.existsSync(DATA_FILE)) {
      const data = fs.readFileSync(DATA_FILE, 'utf-8');
      try {
        const parsed = JSON.parse(data);
        this.todos = parsed.map(
          item =>
            new TodoItem(
              item.id,
              item.text,
              item.completed,
              new Date(item.createdAt)
            )
        );
      } catch (e) {
        console.error('파일 파싱 오류:', e.message);
        this.todos = [];
      }
    } else {
      this.todos = [];
    }
  }

  save() {
    fs.writeFileSync(DATA_FILE, JSON.stringify(this.todos, null, 2), 'utf-8');
  }

  printTodos(filter = 'all') {
    const todosToShow = this.filterTodos(filter);
    console.log(`\n--- 현재 할 일 목록 (${filter}) ---`);
    if (todosToShow.length === 0) {
      console.log('할 일이 없습니다.');
    } else {
      todosToShow.forEach((todo, index) => {
        console.log(
          `${index + 1}. [${todo.completed ? '✔' : ' '}] ${todo.text} (ID: ${todo.id})`
        );
      });
    }
    console.log('--------------------------------\n');
  }
}

// 콘솔 명령어 테스트용 
function simulate() {
  const todoList = new TodoList();

  todoList.addTodo('공부하기');
  todoList.addTodo('운동하기');
  todoList.addTodo('친구에게 연락하기');

  todoList.printTodos();

  const all = todoList.getAllTodos();
  todoList.toggleTodo(all[0].id);
  todoList.updateTodo(all[1].id, '30분 운동하기');

  todoList.printTodos();
  todoList.printTodos('completed');
  todoList.printTodos('active');

  todoList.clearCompleted();
  todoList.printTodos();
}

if (require.main === module) {
  simulate();
}

module.exports = { TodoList, TodoItem };
